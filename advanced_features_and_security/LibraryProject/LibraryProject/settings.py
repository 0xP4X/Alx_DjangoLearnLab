"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import sys
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Add the parent directory to Python path to find the bookshelf app
sys.path.append(str(BASE_DIR.parent))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-jllln3i4k7ckc=2vk+r8+#vbr3sfdc#((=)5e4+@mj1_7%3c8+'

# SECURITY WARNING: don't run with debug turned on in production!
# Set DEBUG to False in production to prevent information disclosure
DEBUG = True  # Set to False in production

# Configure allowed hosts for production security
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']  # Add your production domains here


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bookshelf',  # Contains CustomUser model
    'relationship_app',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'bookshelf.middleware.SecurityHeadersMiddleware',  # Custom CSP and security headers
    'bookshelf.middleware.SecurityLoggingMiddleware',  # Security event logging
    'bookshelf.middleware.RateLimitingMiddleware',     # Basic rate limiting
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model Configuration
# Configure Django to use this custom user model for all user-related functionalities
AUTH_USER_MODEL = 'bookshelf.CustomUser'

# Media files configuration for profile photos
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / 'media'

# =============================================================================
# SECURITY SETTINGS - Best Practices for Django Application Security
# =============================================================================

# HTTPS and SSL/TLS Security Settings
# These settings ensure secure communication and protect against various attacks

# =============================================================================
# HTTPS Configuration - Environment-Based Security Settings
# =============================================================================

# Environment-based HTTPS configuration
# Set DJANGO_HTTPS_ENABLED=True in production environment
HTTPS_ENABLED = os.environ.get('DJANGO_HTTPS_ENABLED', 'False').lower() == 'true'

# =============================================================================
# Secure Cookie Configuration - HTTPS-Aware Cookie Security
# =============================================================================

# Enforce HTTPS for cookies - prevents cookie theft over insecure connections
# Automatically enabled when HTTPS is configured for the environment
# Critical for protecting session data and CSRF tokens in transit

# CSRF Cookie Security
# Ensures CSRF protection cookies are only transmitted over HTTPS
# Prevents CSRF token interception over insecure connections
CSRF_COOKIE_SECURE = HTTPS_ENABLED

# Session Cookie Security
# Ensures session cookies are only transmitted over HTTPS
# Prevents session hijacking attacks over insecure connections
SESSION_COOKIE_SECURE = HTTPS_ENABLED

# Additional cookie security settings
CSRF_COOKIE_HTTPONLY = True  # Prevent JavaScript access to CSRF cookie
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookie
CSRF_COOKIE_SAMESITE = 'Strict'  # Prevent CSRF attacks via cross-site requests
SESSION_COOKIE_SAMESITE = 'Strict'  # Prevent session hijacking via cross-site requests

# Cookie age settings for security
SESSION_COOKIE_AGE = 3600  # Session expires after 1 hour of inactivity
CSRF_COOKIE_AGE = 31449600  # CSRF cookie expires after 1 year

# =============================================================================
# Secure HTTP Headers - Protection Against Client-Side Attacks
# =============================================================================

# X-XSS-Protection Header
# Enables the browser's built-in XSS filtering and helps prevent cross-site scripting attacks
# Modern browsers have this enabled by default, but explicit setting ensures compatibility
# Value: 1; mode=block (enables XSS filtering and blocks the page if attack detected)
SECURE_BROWSER_XSS_FILTER = True

# X-Content-Type-Options Header
# Prevents browsers from MIME-sniffing a response away from the declared content-type
# Stops browsers from trying to guess content types, which can lead to security vulnerabilities
# Value: nosniff (prevents MIME type sniffing)
SECURE_CONTENT_TYPE_NOSNIFF = True

# X-Frame-Options Header
# Prevents the site from being embedded in frames, protecting against clickjacking attacks
# DENY: The page cannot be displayed in a frame, regardless of the site attempting to do so
# SAMEORIGIN: The page can only be displayed in a frame on the same origin as the page itself
# ALLOW-FROM uri: The page can only be displayed in a frame on the specified origin
X_FRAME_OPTIONS = 'DENY'

# =============================================================================
# HTTPS Security Settings - Production-Ready HTTPS Configuration
# =============================================================================

# Force HTTPS redirects for all HTTP requests
# Redirects all non-HTTPS requests to HTTPS automatically
# Critical for ensuring all communication is encrypted
SECURE_SSL_REDIRECT = HTTPS_ENABLED

# HTTP Strict Transport Security (HSTS) Configuration
# Instructs browsers to only access the site via HTTPS for the specified time
# Prevents protocol downgrade attacks and cookie hijacking
SECURE_HSTS_SECONDS = 31536000 if HTTPS_ENABLED else 0  # 1 year (365 days)

# Include all subdomains in the HSTS policy
# Ensures that all subdomains are also accessed via HTTPS only
# Provides comprehensive protection across the entire domain
SECURE_HSTS_INCLUDE_SUBDOMAINS = HTTPS_ENABLED

# Allow the domain to be included in browsers' HSTS preload lists
# Provides protection even on the first visit to the site
# Requires submission to browser vendors' preload lists
SECURE_HSTS_PRELOAD = HTTPS_ENABLED

# Secure proxy headers configuration
# Required when using reverse proxies (Nginx, Apache, load balancers)
# Tells Django to trust the X-Forwarded-Proto header from the proxy
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https') if HTTPS_ENABLED else None

# Additional HTTPS Security Settings

# Ensure that Django's CSRF protection isn't accidentally disabled
# when using HTTPS (should always be True in production)
SECURE_CROSS_ORIGIN_OPENER_POLICY = 'same-origin'

# Referrer Policy for HTTPS
# Controls how much referrer information is included with requests
SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

# Password Security Settings
# Configure strong password requirements and hashing

# Use strong password hashers (Argon2 is recommended)
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
]

# Password validation for strong passwords
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
        'OPTIONS': {
            'max_similarity': 0.7,
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
        'OPTIONS': {
            'min_length': 12,  # Require minimum 12 characters
        }
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Security Middleware Configuration
# Ensure security middleware is properly ordered in MIDDLEWARE setting

# Content Security Policy (CSP) Settings
# These will be implemented via middleware or manual headers
CSP_DEFAULT_SRC = ["'self'"]
CSP_SCRIPT_SRC = ["'self'", "'unsafe-inline'"]  # Restrict in production
CSP_STYLE_SRC = ["'self'", "'unsafe-inline'"]   # Restrict in production
CSP_IMG_SRC = ["'self'", "data:", "https:"]
CSP_FONT_SRC = ["'self'", "https:"]
CSP_CONNECT_SRC = ["'self'"]
CSP_FRAME_ANCESTORS = ["'none'"]  # Prevent framing

# Logging Configuration for Security Events
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'file': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': BASE_DIR / 'logs' / 'security.log',
            'formatter': 'verbose',
        },
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django.security': {
            'handlers': ['file', 'console'],
            'level': 'WARNING',
            'propagate': True,
        },
        'django.request': {
            'handlers': ['file', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

# Additional Security Settings

# Prevent host header injection
USE_L10N = True
USE_TZ = True

# File upload security
FILE_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
DATA_UPLOAD_MAX_MEMORY_SIZE = 5242880  # 5MB
FILE_UPLOAD_PERMISSIONS = 0o644

# Admin security
ADMIN_URL = 'admin/'  # Change this in production to something less obvious

# Database security - ensure proper connection encryption in production
# Add 'sslmode': 'require' to database OPTIONS for PostgreSQL in production
